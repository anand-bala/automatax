[project]
name = "automatix"
version = "0.1.0"
description = "Symbolic automata using JAX"
authors = ["Anand Balakrishnan <anandbala1597@gmail.com>"]
channels = ["conda-forge"]
platforms = ["linux-64", "linux-aarch64", "osx-64", "osx-arm64"]

[dependencies]
typing-extensions = "*"
jax = "~=0.4"
jaxtyping = "~=0.2"
numpy = "~=1.26.4"
equinox = "~=0.11"
sympy = "~=1.12"
networkx = "~=3.2.1"

[host-dependencies]
python = "~=3.9"
pip = "*"

[feature.dev.tasks]
docs = "PYTHONPATH=src mkdocs build"
serve-docs = "PYTHONPATH=src mkdocs serve"
ruff = "ruff check --fix --exit-non-zero-on-fix ."
black = "black src"
isort = "isort src"
mypy = "mypy src"
lint = { depends_on = ["black", "isort", "ruff", "mypy"] }
test = "pytest"

[feature.dev.build-dependencies]
mkdocs = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"
mkdocs-material = "*"
ruff = "*"
black = "*"
isort = "*"
mypy = "*"
ipython = "*"
pytest = "*"

[feature.cuda11]
channels = ["conda-forge", "nvidia"]
system-requirements = { cuda = "11" }
platforms = ["linux-64"]

[feature.cuda11.dependencies]
cuda-nvcc = { version = "*", channel = "nvidia" }
jaxlib = { version = "*", build = "*cuda*" }

[feature.cuda12]
channels = ["conda-forge", "nvidia"]
system-requirements = { cuda = "12" }
platforms = ["linux-64"]

[feature.cuda12.dependencies]
cuda-nvcc = { version = "*", channel = "nvidia" }
jaxlib = { version = "*", build = "*cuda*" }

[feature.examples.tasks]
unicycle-example = "python ./examples/motion_planning/unicycle.py"
pusher-example = "python ./examples/motion_planning/pusher.py"

[feature.examples.dependencies]
brax = "*"
matplotlib = "*"
scienceplots = "*"

[environments]
default = ["dev"]
dev = ["dev", "examples"]
cuda11 = ["cuda11"]
cuda11-dev = ["cuda11", "dev", "examples"]
cuda12 = ["cuda12"]
cuda12-dev = ["cuda12", "dev", "examples"]
